p "data bool : Set where true | false" 
p "caseBool ( x : Set ) ( y z : x ) : bool -> Set = split false -> y || true -> z"
p "indBool ( x : bool -> Set ) ( y : x false ) ( z : x true ) : ( b : bool ) -> x b = split false -> y || true  -> z"
p "funExt  ( a : Set )   ( b : a -> Set )   ( f g :  ( x : a )  -> b x )   ( p :  ( x : a )  -> ( b x )   ( f x ) == ( g x )  )  : (  ( y : a )  -> b y )  f == g = undefined"

p "equalNat : nat -> nat -> bool = split zero -> split@ ( nat -> bool ) with zero  -> true || suc n -> false || suc m -> split@ ( nat -> bool ) with zero -> false || suc n -> equalNat m n"

